//
// NullableClass.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NullableClass: Codable, Hashable {

    public var integerProp: Int?
    public var numberProp: Double?
    public var booleanProp: Bool? = false
    public var stringProp: String?
    public var dateProp: Date?
    public var datetimeProp: Date?
    public var arrayNullableProp: [AnyCodable]?
    public var arrayAndItemsNullableProp: [AnyCodable]?
    public var arrayItemsNullable: [AnyCodable]?
    public var objectNullableProp: [String: AnyCodable]?
    public var objectAndItemsNullableProp: [String: AnyCodable]?
    public var objectItemsNullable: [String: AnyCodable]?

    public init(integerProp: Int? = nil, numberProp: Double? = nil, booleanProp: Bool? = false, stringProp: String? = nil, dateProp: Date? = nil, datetimeProp: Date? = nil, arrayNullableProp: [AnyCodable]? = nil, arrayAndItemsNullableProp: [AnyCodable]? = nil, arrayItemsNullable: [AnyCodable]? = nil, objectNullableProp: [String: AnyCodable]? = nil, objectAndItemsNullableProp: [String: AnyCodable]? = nil, objectItemsNullable: [String: AnyCodable]? = nil) {
        self.integerProp = integerProp
        self.numberProp = numberProp
        self.booleanProp = booleanProp
        self.stringProp = stringProp
        self.dateProp = dateProp
        self.datetimeProp = datetimeProp
        self.arrayNullableProp = arrayNullableProp
        self.arrayAndItemsNullableProp = arrayAndItemsNullableProp
        self.arrayItemsNullable = arrayItemsNullable
        self.objectNullableProp = objectNullableProp
        self.objectAndItemsNullableProp = objectAndItemsNullableProp
        self.objectItemsNullable = objectItemsNullable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case integerProp = "integer_prop"
        case numberProp = "number_prop"
        case booleanProp = "boolean_prop"
        case stringProp = "string_prop"
        case dateProp = "date_prop"
        case datetimeProp = "datetime_prop"
        case arrayNullableProp = "array_nullable_prop"
        case arrayAndItemsNullableProp = "array_and_items_nullable_prop"
        case arrayItemsNullable = "array_items_nullable"
        case objectNullableProp = "object_nullable_prop"
        case objectAndItemsNullableProp = "object_and_items_nullable_prop"
        case objectItemsNullable = "object_items_nullable"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(integerProp, forKey: .integerProp)
        try container.encodeIfPresent(numberProp, forKey: .numberProp)
        try container.encodeIfPresent(booleanProp, forKey: .booleanProp)
        try container.encodeIfPresent(stringProp, forKey: .stringProp)
        try container.encodeIfPresent(dateProp, forKey: .dateProp)
        try container.encodeIfPresent(datetimeProp, forKey: .datetimeProp)
        try container.encodeIfPresent(arrayNullableProp, forKey: .arrayNullableProp)
        try container.encodeIfPresent(arrayAndItemsNullableProp, forKey: .arrayAndItemsNullableProp)
        try container.encodeIfPresent(arrayItemsNullable, forKey: .arrayItemsNullable)
        try container.encodeIfPresent(objectNullableProp, forKey: .objectNullableProp)
        try container.encodeIfPresent(objectAndItemsNullableProp, forKey: .objectAndItemsNullableProp)
        try container.encodeIfPresent(objectItemsNullable, forKey: .objectItemsNullable)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        integerProp = try container.decodeIfPresent(Int.self, forKey: "integer_prop")
        numberProp = try container.decodeIfPresent(Double.self, forKey: "number_prop")
        booleanProp = try container.decodeIfPresent(Bool.self, forKey: "boolean_prop")
        stringProp = try container.decodeIfPresent(String.self, forKey: "string_prop")
        dateProp = try container.decodeIfPresent(Date.self, forKey: "date_prop")
        datetimeProp = try container.decodeIfPresent(Date.self, forKey: "datetime_prop")
        arrayNullableProp = try container.decodeIfPresent([AnyCodable].self, forKey: "array_nullable_prop")
        arrayAndItemsNullableProp = try container.decodeIfPresent([AnyCodable].self, forKey: "array_and_items_nullable_prop")
        arrayItemsNullable = try container.decodeIfPresent([AnyCodable].self, forKey: "array_items_nullable")
        objectNullableProp = try container.decodeIfPresent([String: AnyCodable].self, forKey: "object_nullable_prop")
        objectAndItemsNullableProp = try container.decodeIfPresent([String: AnyCodable].self, forKey: "object_and_items_nullable_prop")
        objectItemsNullable = try container.decodeIfPresent([String: AnyCodable].self, forKey: "object_items_nullable")
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("integer_prop")
        nonAdditionalPropertyKeys.insert("number_prop")
        nonAdditionalPropertyKeys.insert("boolean_prop")
        nonAdditionalPropertyKeys.insert("string_prop")
        nonAdditionalPropertyKeys.insert("date_prop")
        nonAdditionalPropertyKeys.insert("datetime_prop")
        nonAdditionalPropertyKeys.insert("array_nullable_prop")
        nonAdditionalPropertyKeys.insert("array_and_items_nullable_prop")
        nonAdditionalPropertyKeys.insert("array_items_nullable")
        nonAdditionalPropertyKeys.insert("object_nullable_prop")
        nonAdditionalPropertyKeys.insert("object_and_items_nullable_prop")
        nonAdditionalPropertyKeys.insert("object_items_nullable")
        additionalProperties = try container.decodeMap(AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}
