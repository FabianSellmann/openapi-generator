//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, Hashable {

    public var id: Int64?
    public var username: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var password: String?
    public var phone: String?
    /** User Status */
    public var userStatus: Int?
    /** test code generation for objects Value must be a map of strings to values. It cannot be the &#39;null&#39; value. */
    public var arbitraryObject: AnyCodable?
    /** test code generation for nullable objects. Value must be a map of strings to values or the &#39;null&#39; value. */
    public var arbitraryNullableObject: AnyCodable?
    /** test code generation for any type Value can be any type - string, number, boolean, array or object. */
    public var arbitraryTypeValue: AnyCodable?
    /** test code generation for any type Value can be any type - string, number, boolean, array, object or the &#39;null&#39; value. */
    public var arbitraryNullableTypeValue: AnyCodable?

    public init(id: Int64? = nil, username: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, password: String? = nil, phone: String? = nil, userStatus: Int? = nil, arbitraryObject: AnyCodable? = nil, arbitraryNullableObject: AnyCodable? = nil, arbitraryTypeValue: AnyCodable? = nil, arbitraryNullableTypeValue: AnyCodable? = nil) {
        self.id = id
        self.username = username
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.password = password
        self.phone = phone
        self.userStatus = userStatus
        self.arbitraryObject = arbitraryObject
        self.arbitraryNullableObject = arbitraryNullableObject
        self.arbitraryTypeValue = arbitraryTypeValue
        self.arbitraryNullableTypeValue = arbitraryNullableTypeValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case username
        case firstName
        case lastName
        case email
        case password
        case phone
        case userStatus
        case arbitraryObject
        case arbitraryNullableObject
        case arbitraryTypeValue
        case arbitraryNullableTypeValue
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(password, forKey: .password)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(userStatus, forKey: .userStatus)
        try container.encodeIfPresent(arbitraryObject, forKey: .arbitraryObject)
        try container.encodeIfPresent(arbitraryNullableObject, forKey: .arbitraryNullableObject)
        try container.encodeIfPresent(arbitraryTypeValue, forKey: .arbitraryTypeValue)
        try container.encodeIfPresent(arbitraryNullableTypeValue, forKey: .arbitraryNullableTypeValue)
    }
}
